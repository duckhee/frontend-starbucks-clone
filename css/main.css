/* COMMON */

body {
    color: #333333;
    /* 기본적으로 16px로 사용을 한다 */
    font-size: 16px;
    /* 글자의 두께를 400으로 지정하는 것 */
    font-weight: 400;
    /* 통상적인 1.4배로 사용을 하겠다는 의미 (행간 제공) */
    line-height: 1.4;
    font-family: 'Nanum Gothic', sans-serif;
    height: 3000px;
}


/* image가 현재 75px 이다. image 는 inline 요소이다. */


/* inline 요소는 기본적으로 baseline이라는 것을 바탕으로 그려진다 따라서 아래 여백이 생길 수 있다. */

img {
    display: block;
}


/* 링크인 것을 알려주기 위한 밑줄을 사용하지 않겠다는 의미이다. */

a {
    text-decoration: none;
}


/* inner 를 공통으로 사용하기 위해서 공통적으로 사용할 것을 여기서 정의를 한다. */

.inner {
    width: 1100px;
    /* 좌우만 자동으로 동작하게 변경을 해주는 것 중앙 정렬 - header에 중앙 정렬하는 것 */
    margin: 0 auto;
    /* position에 대한 구조적인 부모요소를 설정을 해주는 것 */
    position: relative;
}


/* HEADER */

header {
    width: 100%;
    background-color: #f6f5f0;
    border-bottom: 1px solid #c8c8c8;
    /* badge를 absolute 설정하기 위한 부모 요소를 position설정 */
    /* position: relative; */
    /* position의 값이 absolute, fixed(위치상의 부모요소가 될수있다.)는 가로의 값을 최소한으로 사용을 할려고 한다. */
    position: fixed;
    top: 0;
}


/* header 의 자식 요소의 값만 적용 시키기 위한 자식 섴택자를 사용해서 설정 해주는 것 이다. */

header>.inner {
    /* width: 1100px; */
    height: 120px;
    /* 좌우만 자동으로 동작하게 변경을 해주는 것 중앙 정렬 - header에 중앙 정렬하는 것 */
    /* margin: 0 auto; */
    /* position에 대한 구조적인 부모요소를 설정을 해주는 것 */
    /* position: relative; */
}


/* 하위 선택자를 사용해서 선택하는 것 */

header .logo {
    /* 위아래의 값을 알아야 가운데 배치가 가능하다. */
    height: 75px;
    /* 구조적인 부모의 요소에 대해서 absolute로 배치를 시키겠다는 의미이다. 배치를 하는 것이다. */
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    /* 높이 값이 정해져 있어서 위 아래로 정렬이 된다. */
    margin: auto;
}


/* menu와 search 박스를 수평으로 정렬하기 위한 flex 설정 */

header .sub-menu {
    /* 오른쪽 위치에 있도록 하게 하기 위한 absolute */
    position: absolute;
    top: 10px;
    right: 0;
    display: flex;
}

header .sub-menu ul.menu {
    font-family: Arial, sans-serif;
    /* 수평으로 변경을 하기 위한 display flex 선택 */
    display: flex;
}

header .sub-menu ul.menu li {
    position: relative;
}


/* 가상요소를 추가하는 것이다. before 라는 가상요소는 기본적으로 inline요소이다. */

header .sub-menu ul.menu li::before {
    /* content라는 값이 없으면, before라는 가상요소는 만들어지지 않는다. */
    content: "";
    /* 기본적으로 인라인 요소를 블록 요소로 전환하는 것 */
    /* display의 값이 absolute, fixed 자동으로 block 값을 가진다. */
    display: block;
    width: 1px;
    height: 12px;
    background-color: #e5e5e5;
    /* absolute의 값이 있으면, 자동적으로 block 요소로 변경이된다. */
    position: absolute;
    top: 0;
    bottom: 0;
    margin: auto 0;
}


/* 가상 클래스 선택자를 설정하는 것 처음 위치 하는 것을 선택하는 것이다. */

header .sub-menu ul.menu li:first-child::before {
    display: none;
}

header .sub-menu ul.menu li a {
    font-size: 12px;
    padding: 11px 16px;
    display: block;
    color: #656565;
}


/* : 하나는 가상 클래스 선택자를 선택하는 것이다. */

header .sub-menu ul.menu li a:hover {
    color: #000000;
}

header .sub-menu .search {
    position: relative;
    height: 34px;
}

header .sub-menu .search input {
    width: 36px;
    height: 34px;
    padding: 4px 10px;
    border: 1px solid #ccc;
    /* 요소의 크기 기준을 현재 지정한 width, height 값을 유지하도록 설정을 해주는 것이다. */
    /* 요소의 내용 + padding + border로 크기를 계산을 한다. - border-box */
    /* 요소의 내용을 가지고 크기를 계산한다. - content-box */
    box-sizing: border-box;
    border-radius: 5px;
    outline: none;
    background-color: #ffffff;
    color: #777777;
    font-size: 12px;
    /* 전환 효과를 저장하는 것 가로의 값이 변환하는 속도를 지정해준 것이다. */
    transition: width .4s;
}


/* 가상 선택 클래스를 선택을 해서 focus가 되었을 때, 변경을 하기 위해서 사용한다. */

header .sub-menu .search input:focus {
    width: 190px;
    border-color: #669900;
}

header .sub-menu .search .material-icons {
    /* font의 기본 사이즈가 24px이다. */
    height: 24px;
    position: absolute;
    top: 0;
    bottom: 0;
    margin: auto;
    right: 5px;
    transition: .4s;
}


/* search 부분에 focused 가 되었을 경우 동작 */


/* .search.focused 다음과 같은 것은 일치 선택자이다. .search 라는 클래스에 있는 태그에 .focused 라는 class 도 있어야 적용이 된다. */

header .sub-menu .search.focused .material-icons {
    opacity: 0;
}


/* header main-menu */

header .main-menu {
    position: absolute;
    bottom: 0;
    right: 0;
    /* 상단에 위치하도록 하기 위해서 z-index를 설정 */
    z-index: 1;
    display: flex;
}

header .main-menu .item {}

header .main-menu .item .item__name {
    /* 4개의 값은 위에서 부터 시계방향으로 적용이된다. */
    padding: 10px 20px 34px 20px;
    font-family: Arial, sans-serif;
    font-size: 13px;
}


/* 각각의 이름부분만 적용이되는 것이 아니라 item__contents의 값이 나와야하기 때문에 item에 적용을 해줘야한다. */

header .main-menu .item:hover .item__name {
    background-color: #2c2a29;
    color: #669900;
    /* 좌측 상단 부터 적용순서이다. */
    border-radius: 6px 6px 0 0;
}

header .main-menu .item .item__contents {
    width: 100%;
    /* top이나 bottom 속성을 사용하지 않아 수직 위치 값이 없다면, 요소의 원래 위치를 그대로 사용한다. */
    /* 만약 position: absolute;를 사용한다면, 위치상 부모 요소를 기중으로 하므로 화면의 뷰포트 좌우 끝까지 늘어날 수 없게 된다. */
    position: fixed;
    left: 0;
    display: none;
}

header .main-menu .item:hover .item__contents {
    display: block;
}

header .main-menu .item .item__contents .contents__menu {
    background-color: #2c2a29;
}

header .main-menu .item .item__contents .contents__menu>ul {
    /* menu의 값을 수평으로 보여주기 위해서 */
    display: flex;
    padding: 20px 0;
}

header .main-menu .item .item__contents .contents__menu>ul>li {
    width: 220px;
}

header .main-menu .item .item__contents .contents__menu>ul>li h4 {
    padding: 3px 0 12px 0;
    font-size: 14px;
    color: #ffffff;
}

header .main-menu .item .item__contents .contents__menu>ul>li ul li {
    padding: 5px 0;
    font-size: 12px;
    color: #999999;
    cursor: pointer;
}

header .main-menu .item .item__contents .contents__menu>ul>li ul li:hover {
    color: #669900;
}

header .main-menu .item .item__contents .contents__texture {
    /* 배경의 이미지를 url 함수로 가져오는 방법 기본 값은 반복적으로 나타는 것이다.*/
    background-image: url("../images/main_menu_pattern.jpg");
    padding: 26px 0;
    height: 100px;
    /* 기본적으로 글자와 관련된 값은 상속이 된다. */
    font-size: 12px;
}

header .main-menu .item .item__contents .contents__texture h4 {
    color: #999999;
    font-weight: 700;
}

header .main-menu .item .item__contents .contents__texture p {
    color: #669900;
    /* 값이 샂 중하로 구분하면된다. */
    margin: 4px 0 14px;
}

header .badges {
    position: absolute;
    top: 132px;
    right: 12px;
}

header .badges .badge {
    /* border를 둥글게 해주는 것 */
    border-radius: 10px;
    /* 이미지가 박스보다 클 경우, 박스만큼만 보이게 해주는 것 */
    overflow: hidden;
    /* 사이사이의 간격을 넣는 것 */
    margin-bottom: 12px;
    /* 박스의 그림자 효과를 넣는 것(값은 x, y, blur의 값이다) */
    /* rgb(red, green, blue, alpha) 값을 가지는 css 함수이다. */
    box-shadow: 4px 4px 10px rgb(0, 0, 0, 0.15);
    cursor: pointer;
}